#version 430
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

// TODO: Camera uniform and struct, for now we hard code this
struct Camera {
    int image_width;
    int image_height;

    vec3 horizontal;
    vec3 vertical;

    vec3 lower_left_corner;
    vec3 origin;
};
uniform Camera camera;

// TODO: SOA, modify shader (array size) based on screen size
struct Rays {
    vec3 origin;
    vec3 direction;
};
vec3 RayAt(Rays r, float t);
vec3 RayColor(Rays r);

void main() {
    ivec2 pixel_coord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    float u = float(pixel_coord.x) / (camera.image_width-1);
    float v = float(pixel_coord.y) / (camera.image_height-1);
    
    vec3 ray_dir = camera.lower_left_corner + u * camera.horizontal + v * camera.vertical - camera.origin;
    Rays ray = Rays(camera.origin, ray_dir);
    vec4 color = vec4(RayColor(ray), 1.0);
    imageStore(img_output, pixel_coord, color);
}

vec3 RayAt(Rays r, float t) {
    return r.origin + r.direction * t;
}

vec3 RayColor(Rays r) {
    vec3 direction_norm = normalize(r.direction);
    float t = 0.5 * (direction_norm.y + 1.0);
    return (1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0);
}