#version 450
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

/*
    This code is based on raytracing in one weekend (https://raytracing.github.io/books/RayTracingInOneWeekend.html)
*/

// Constants
// See glsl 4.40 spec chapter 4.7.1 for info on infinity
// https://www.khronos.org/registry/OpenGL/specs/gl/GLSLangSpec.4.40.pdf
const float infinity = 0.001 / 0;
const float pi = 3.14159265358; // 3.1415926535897932385

float DegreesToRadians(float deg) {
    return deg * pi / 180.0;
}


struct Camera {
    int image_width;
    int image_height;

    vec3 horizontal;
    vec3 vertical;

    vec3 lower_left_corner;
    vec3 origin;
};
uniform Camera camera;

struct Ray {
    vec3 origin;
    vec3 direction;
};
vec3 RayAt(Ray r, float t);
vec3 RayColor(Ray r);

struct HitRecord {
    vec3 point;
    vec3 normal;
    float t;
    bool front_face;
};
void HitRecordFaceNormal(out HitRecord rec, Ray r, vec3 out_normal);

// TODO: 6.13. An Abstraction for Hittable Objects
//       abstraction for hittable on GPU can use 
//       "location aliasing" (https://www.khronos.org/opengl/wiki/Layout_Qualifier_(GLSL)#Interface_components)
//       Pad all primitives with the same byte size and specify type using a
//       enum (int). Using the enum we can find out which alias we are using and bring meaning to the struct 
//       data and call the correct method. The negative here is the padding meaning we will waste bytes
//       We can also just keep adding primitives which will bloat our code, but save bytes.  

struct Sphere {
    vec3 center; 
    float radius;
};                     
// Read about std here: https://www.khronos.org/opengl/wiki/Interface_Block_(GLSL)#Memory_layout
layout (std430, binding = 1) buffer SphereBuffer {
    Sphere spheres[];
};
bool SpheresHit(Ray r, float t_min, float t_max, out HitRecord rec); 
bool SphereHit(Sphere sphere, Ray r, float t_min, float t_max, out HitRecord rec);

void main() {
    ivec2 pixel_coord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    float u = float(pixel_coord.x) / (camera.image_width-1);
    float v = float(pixel_coord.y) / (camera.image_height-1);

    vec3 ray_dir = camera.lower_left_corner + u * camera.horizontal + v * camera.vertical - camera.origin;
    Ray ray = Ray(camera.origin, ray_dir);
    vec4 color = vec4(RayColor(ray), 1.0);
    imageStore(img_output, pixel_coord, color);
}

vec3 RayAt(Ray r, float t) {
    return r.origin + r.direction * t;
}

vec3 RayColor(Ray r) {
    HitRecord hit;
    if (SpheresHit(r, 0.0, infinity, hit)) {
        return 0.5 * vec3(hit.normal.x + 1, hit.normal.y + 1, hit.normal.z + 1);
    }

    float t = 0.5 * (normalize(r.direction).y + 1.0);
    return (1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0);
}

void HitRecordFaceNormal(out HitRecord rec, Ray r, vec3 out_normal) {
    rec.front_face = dot(r.direction, out_normal) < 0; 
    if (rec.front_face) {
        rec.normal = out_normal;
    } else {
        rec.normal = -out_normal;
    }
}

bool SpheresHit(Ray r, float t_min, float t_max, out HitRecord rec) {
    HitRecord temp_rec;
    bool has_hit = false;
    float closest = t_max;

    for (int i = 0; i < spheres.length(); i++) {
        if (SphereHit(spheres[i], r, t_min, closest, temp_rec)) {
            has_hit = true;
            rec = temp_rec;
            closest = rec.t;
        }
    }

    return has_hit;
} 

bool SphereHit(Sphere sphere, Ray r, float t_min, float t_max, out HitRecord rec) {
    // calculate vector from sphere to ray origin
    vec3 oc = r.origin - sphere.center; 
    float a = dot(r.direction, r.direction);
    float half_b = dot(oc, r.direction);
    // angle distance between ray and oc 
    float c = dot(oc, oc) - sphere.radius * sphere.radius;
    
    float discriminant = half_b * half_b - a * c;
    if (discriminant < 0) {
        return false;
    }

    float sqrt_disc = sqrt(discriminant);
    float root = (-half_b - sqrt_disc ) / a;
    if (root < t_min || t_max < root) {
        // abc formula: https://en.wikipedia.org/wiki/Quadratic_equation#Quadratic_formula_and_its_derivation
        root = (-half_b + sqrt_disc ) / a; 
        if (root < t_min || t_max < root) {
            return false;
        }
    }

    rec.t = root;
    rec.point = RayAt(r, rec.t);
    vec3 out_normal = (rec.point - sphere.center) / sphere.radius;
    HitRecordFaceNormal(rec, r, out_normal);

    return true;
}