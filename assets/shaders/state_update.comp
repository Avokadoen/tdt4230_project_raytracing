#version 430
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;
layout(r8, binding = 1) uniform image2D update_map;
layout(rg32f, binding = 2) uniform image2D velocity_map;

// TODO: It would probably be faster to seperate passes into unique shaders. We will have to find a way
//       to share code between them before we do this 
// TODO: we can do all passes in one dispatch 

// TODO: currently the water behave very strange. 
//        - Implementing wind and velocity would mediate a lot of the ugly
//          behaviour
//        - More debugging on the update_map (suspicion of this being bug)
//        - Find solution to this case: 
//              - Pixel tries to move in a direction
//              - Pixel gets blocked by other pixel
//              - Other pixel moves the same frame, and Pixel was actually clear to move

uniform int pass_type         = 0;
const int CHUNK_PASS          = 0;
const int VERTICAL_PASS       = 1;
const int HORIZONTAL_PASS     = 2;
const int CLEANUP_PASS        = 3;

// compute pass type operation
void fragment_pass();
void vertical_pass();
void horizontal_pass();
void cleanup_pass();
void update(ivec2 left_bottom_corner, ivec2 offset);

bool valid_change_for_pass(ivec2 velocity);

const int ATTEMPT_SUCCEEDS      = 0;
// This means the change was denied as change is outside of the pass Jurisdiction
const int ATTEMPT_END           = -1; 
// This means we can try in other directions if we want
const int ATTEMPT_PIXEL_BLOCKED = -2; 

// pixel functions
int attempt_move_pixel(ivec2 pixel, ivec2 chunk_start, ivec2 velocity, vec4 current_color);

void write_pixel(ivec2 pixel, vec4 color, ivec2 velocity);
bool pixel_taken(ivec2 pixel);
bool pixel_in_chunk(ivec2 pixel, ivec2 left_bottom_corner);
bool pixel_in_texture(ivec2 pixel);

void main() {
  switch (pass_type) {
    case CHUNK_PASS:
      fragment_pass();
      break;
    case VERTICAL_PASS:
      vertical_pass();
      break;
    case HORIZONTAL_PASS:
      horizontal_pass();
      break;
    case CLEANUP_PASS:
      cleanup_pass();
      break;
    default:
      break;
  }
}

void fragment_pass() {
  ivec2 chunk_start = ivec2(gl_GlobalInvocationID.x * 8, gl_GlobalInvocationID.y * 8);
  for (uint y = 0; y < 8; y++) {
    for (uint x = 0; x < 8; x++) {
      update(chunk_start, ivec2(x, y));
    }
  }
}

void vertical_pass() {
  ivec2 chunk_start = ivec2(gl_GlobalInvocationID.x * 8, gl_GlobalInvocationID.y * 8);
  for (uint y = 0; y < 8; y++) {
    for (uint x = 7; x < 9; x++) {
      update(chunk_start, ivec2(x, y));
    }
  }
}

void horizontal_pass() {
  ivec2 chunk_start = ivec2(gl_GlobalInvocationID.x * 8, (gl_GlobalInvocationID.y * 8) - 2);
  for (uint y = 0; y < 3; y++) {
   for (uint x = 0; x < 8; x++) {
      update(chunk_start, ivec2(x, y));   
    }
  }
}

/// we dispatch at this stage with 512 x 512 to make this cleanup as fast as possible
void cleanup_pass() {
  ivec2 pixel = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
  imageStore(update_map, pixel, vec4(0, 0, 0, 0));
}

// TODO: using one update function for every pass is probably problematic
void update(ivec2 chunk_start, ivec2 offset) {
  ivec2 pixel_coords = chunk_start + offset;
  
  vec4 is_pixel_set = imageLoad(update_map, pixel_coords);
  if (is_pixel_set.r >= 0.999) {
    return;
  }

  vec4 current_color = imageLoad(img_output, pixel_coords);
  int attempt_result = ATTEMPT_SUCCEEDS;
  if (current_color.w >= 0.989) { // TODO: logic to select only water pixels
    attempt_result = ATTEMPT_PIXEL_BLOCKED;
    
    ivec2 velocity;
    for (int i = 0; i < 3 && attempt_result == ATTEMPT_PIXEL_BLOCKED; i++) {
      if (i == 0) {
        velocity = ivec2(0, -1);
      } else if (i == 1) {
        vec4 prev_velocity = imageLoad(velocity_map, pixel_coords);
        if (abs(prev_velocity.x) > 0) {
          velocity = ivec2(prev_velocity.xy);
        } else {
          velocity = ivec2(-1, 0);
        }
      } else {
        velocity.x *= -1;
      }
      attempt_result = attempt_move_pixel(pixel_coords, chunk_start, velocity, current_color);
    }
  } else if (current_color.w >= 0.97 && current_color.w < 0.989) {
    ivec2 velocity = ivec2(0, -1);
    attempt_result = attempt_move_pixel(pixel_coords, chunk_start, velocity, current_color);
  }
  
  if (attempt_result == ATTEMPT_SUCCEEDS) {
    imageStore(img_output, pixel_coords, vec4(0, 0, 0, 0));
    imageStore(velocity_map, pixel_coords, vec4(0, 0, 0, 1));
  } else if (attempt_result == ATTEMPT_PIXEL_BLOCKED) {
    //imageStore(update_map, pixel_coords, vec4(1, 1, 1, 1));
    imageStore(velocity_map, pixel_coords, vec4(0, 0, 0, 1));
  }
}

bool valid_change_for_pass(ivec2 velocity) {
  if (pass_type == VERTICAL_PASS && velocity.x != 0 ) {
    return false;
  }
  
  if (pass_type == HORIZONTAL_PASS && velocity.y != 0) {
    return false;
  }

  return true;
}

// TODO: this should also return color of pixel that blocked
int attempt_move_pixel(ivec2 pixel, ivec2 chunk_start, ivec2 velocity, vec4 current_color) {
    ivec2 next_coords = pixel + velocity;
    // if we are in the intersection between a chunk we should not care about chunks in a non fragment passs
    bool chunk_border_accept = (pass_type != CHUNK_PASS) ? true : pixel_in_chunk(next_coords, chunk_start);  
    if (!chunk_border_accept) {
      return ATTEMPT_END;
    }

    if (pixel_in_texture(next_coords) && !pixel_taken(next_coords)) {
      write_pixel(next_coords, current_color, pixel);
      return ATTEMPT_SUCCEEDS;
    } 

    return ATTEMPT_PIXEL_BLOCKED;
}

bool pixel_taken(ivec2 pixel) {
  return imageLoad(img_output, pixel).b > 0; // TODO: logic to check if air pixel
}

bool pixel_in_chunk(ivec2 pixel, ivec2 left_bottom_corner) {
  if (pass_type != CHUNK_PASS) return true;

  return  pixel.x >= left_bottom_corner.x && pixel.x < (left_bottom_corner.x + 8) &&
          pixel.y >= left_bottom_corner.y && pixel.y < (left_bottom_corner.y + 8);
}

bool pixel_in_texture(ivec2 pixel) {
  return  pixel.x >= 0 && pixel.y >= 0 && pixel.x < 512 && pixel.y < 512;
}

void write_pixel(ivec2 pixel, vec4 color, ivec2 previous_pixel) {
  imageStore(img_output, pixel, color);
  imageStore(velocity_map, pixel, vec4(abs(previous_pixel.x - pixel.x), abs(previous_pixel.y - pixel.y), 0, 0));
  imageStore(update_map, pixel, vec4(1, 0, 0, 1));
}



